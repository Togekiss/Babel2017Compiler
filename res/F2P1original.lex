<const, const>
<identificador, cte1>
<igual, =>
<ct_cadena, "F2P1.bab">
<punt_i_coma, ;>
<const, const>
<identificador, cte2>
<igual, =>
<parentesi_obert, (>
<parentesi_obert, (>
<ct_enter, 3>
<resta, ->
<ct_enter, 1>
<parentesi_tancat, )>
<multiplicacio, *>
<ct_enter, 4>
<parentesi_tancat, )>
<divisio, />
<ct_enter, 2>
<punt_i_coma, ;>
<var, var>
<identificador, v4>
<dos_punts, :>
<tipus_simple, logic>
<punt_i_coma, ;>
<const, const>
<identificador, min>
<igual, =>
<resta, ->
<ct_enter, 50>
<punt_i_coma, ;>
<const, const>
<identificador, max>
<igual, =>
<ct_enter, 50>
<punt_i_coma, ;>
<const, const>
<identificador, cte4>
<igual, =>
<ct_logica, cert>
<and, and>
<ct_logica, cert>
<punt_i_coma, ;>
<var, var>
<identificador, v1>
<dos_punts, :>
<tipus_simple, sencer>
<punt_i_coma, ;>
<var, var>
<identificador, v5>
<dos_punts, :>
<vector, vector>
<claudator_obert, [>
<identificador, min>
<rang, ..>
<identificador, max>
<claudator_tancat, ]>
<de, de>
<tipus_simple, sencer>
<punt_i_coma, ;>
<funcio, funcio>
<identificador, s0>
<parentesi_obert, (>
<parentesi_tancat, )>
<dos_punts, :>
<tipus_simple, sencer>
<punt_i_coma, ;>
<var, var>
<identificador, i>
<dos_punts, :>
<tipus_simple, sencer>
<punt_i_coma, ;>
<func, func>
<escriure, escriure>
<parentesi_obert, (>
<ct_cadena, "Starting ">
<coma, ,>
<identificador, cte1>
<parentesi_tancat, )>
<punt_i_coma, ;>
<identificador, i>
<igual, =>
<identificador, min>
<punt_i_coma, ;>
<identificador, j>
<igual, =>
<parentesi_obert, (>
<identificador, x>
<suma, +>
<ct_enter, 2>
<parentesi_tancat, )>
<resta, ->
<ct_enter, 3>
<punt_i_coma, ;>
<mentre, mentre>
<ct_logica, cert>
<fer, fer>
<si, si>
<identificador, i>
<oper_rel, ==>
<identificador, max>
<llavors, llavors>
<identificador, x>
<igual, =>
<ct_enter, 0>
<punt_i_coma, ;>
<sino, sino>
<identificador, v5>
<claudator_obert, [>
<identificador, i>
<claudator_tancat, ]>
<igual, =>
<identificador, i>
<suma, +>
<ct_enter, 1>
<punt_i_coma, ;>
<fisi, fisi>
<punt_i_coma, ;>
<fimentre, fimentre>
<punt_i_coma, ;>
<fifunc, fifunc>
<punt_i_coma, ;>
<funcio, funcio>
<identificador, s>
<parentesi_obert, (>
<perval, perval>
<identificador, a1>
<dos_punts, :>
<tipus_simple, sencer>
<coma, ,>
<perval, perval>
<identificador, b>
<dos_punts, :>
<tipus_simple, sencer>
<parentesi_tancat, )>
<dos_punts, :>
<tipus_simple, logic>
<punt_i_coma, ;>
<func, func>
<si, si>
<identificador, b>
<oper_rel, ==>
<ct_enter, 0>
<llavors, llavors>
<escriure, escriure>
<parentesi_obert, (>
<ct_cadena, "Bad news!">
<parentesi_tancat, )>
<punt_i_coma, ;>
<retornar, retornar>
<identificador, true>
<or, or>
<identificador, x>
<punt_i_coma, ;>
<fisi, fisi>
<punt_i_coma, ;>
<si, si>
<identificador, b>
<oper_rel, ==>
<identificador, a1>
<llavors, llavors>
<escriure, escriure>
<parentesi_obert, (>
<ct_cadena, "Wow!, jackpod!">
<parentesi_tancat, )>
<punt_i_coma, ;>
<fisi, fisi>
<punt_i_coma, ;>
<si, si>
<parentesi_obert, (>
<identificador, b>
<oper_rel, >>
<ct_enter, 0>
<parentesi_tancat, )>
<and, and>
<parentesi_obert, (>
<identificador, b>
<oper_rel, <>>
<identificador, a1>
<parentesi_tancat, )>
<llavors, llavors>
<escriure, escriure>
<parentesi_obert, (>
<ct_cadena, "The variable value is ">
<coma, ,>
<identificador, b>
<parentesi_tancat, )>
<punt_i_coma, ;>
<fisi, fisi>
<punt_i_coma, ;>
<fifunc, fifunc>
<punt_i_coma, ;>
<funcio, funcio>
<identificador, f>
<parentesi_obert, (>
<perval, perval>
<identificador, val1>
<dos_punts, :>
<tipus_simple, sencer>
<coma, ,>
<perval, perval>
<identificador, val2>
<dos_punts, :>
<tipus_simple, sencer>
<coma, ,>
<perref, perref>
<identificador, ref1>
<dos_punts, :>
<tipus_simple, logic>
<parentesi_tancat, )>
<dos_punts, :>
<tipus_simple, sencer>
<punt_i_coma, ;>
<const, const>
<identificador, n>
<igual, =>
<identificador, max>
<resta, ->
<ct_enter, 1>
<punt_i_coma, ;>
<var, var>
<identificador, i>
<dos_punts, :>
<tipus_simple, sencer>
<punt_i_coma, ;>
<var, var>
<identificador, j>
<dos_punts, :>
<tipus_simple, sencer>
<punt_i_coma, ;>
<func, func>
<identificador, ref1>
<igual, =>
<ct_logica, cert>
<or, or>
<ct_logica, fals>
<punt_i_coma, ;>
<retornar, retornar>
<identificador, s0>
<parentesi_obert, (>
<parentesi_tancat, )>
<punt_i_coma, ;>
<cicle, cicle>
<escriure, escriure>
<parentesi_obert, (>
<ct_cadena, "Enter a number (-1 exits)">
<coma, ,>
<identificador, v6>
<parentesi_tancat, )>
<punt_i_coma, ;>
<llegir, llegir>
<parentesi_obert, (>
<identificador, val1>
<parentesi_tancat, )>
<punt_i_coma, ;>
<si, si>
<identificador, val1>
<oper_rel, <=>
<resta, ->
<ct_enter, 1>
<llavors, llavors>
<identificador, ref1>
<igual, =>
<ct_logica, fals>
<punt_i_coma, ;>
<sino, sino>
<escriure, escriure>
<parentesi_obert, (>
<ct_cadena, "You wrote ">
<coma, ,>
<identificador, val1>
<parentesi_tancat, )>
<punt_i_coma, ;>
<identificador, i>
<igual, =>
<ct_enter, 0>
<punt_i_coma, ;>
<identificador, i>
<igual, =>
<identificador, i>
<divisio, />
<ct_enter, 1>
<punt_i_coma, ;>
<identificador, j>
<igual, =>
<resta, ->
<ct_enter, 1>
<multiplicacio, *>
<identificador, i>
<punt_i_coma, ;>
<retornar, retornar>
<identificador, s>
<parentesi_obert, (>
<identificador, val1>
<coma, ,>
<identificador, i>
<parentesi_tancat, )>
<punt_i_coma, ;>
<fisi, fisi>
<punt_i_coma, ;>
<fins, fins>
<ct_logica, cert>
<punt_i_coma, ;>
<si, si>
<parentesi_obert, (>
<identificador, ref1>
<oper_rel, ==>
<not, not>
<ct_logica, fals>
<parentesi_tancat, )>
<or, or>
<parentesi_obert, (>
<identificador, ref1>
<oper_rel, <>>
<ct_logica, cert>
<parentesi_tancat, )>
<llavors, llavors>
<retornar, retornar>
<ct_enter, 0>
<punt_i_coma, ;>
<sino, sino>
<si, si>
<identificador, esta>
<parentesi_obert, (>
<identificador, j>
<coma, ,>
<identificador, v5>
<parentesi_tancat, )>
<llavors, llavors>
<escriure, escriure>
<parentesi_obert, (>
<ct_cadena, "Bingo!">
<parentesi_tancat, )>
<punt_i_coma, ;>
<sino, sino>
<identificador, f>
<igual, =>
<ct_enter, 10>
<punt_i_coma, ;>
<fisi, fisi>
<punt_i_coma, ;>
<fisi, fisi>
<punt_i_coma, ;>
<fifunc, fifunc>
<punt_i_coma, ;>
<prog, prog>
<identificador, v1>
<igual, =>
<identificador, f>
<parentesi_obert, (>
<identificador, v2>
<coma, ,>
<identificador, v3>
<coma, ,>
<identificador, v4>
<parentesi_tancat, )>
<punt_i_coma, ;>
<fiprog, fiprog>
<eof, eof>
